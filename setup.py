#!/usr/bin/env python3
import os
from glob import glob
from importlib.util import module_from_spec, spec_from_file_location

from setuptools import setup
from setuptools.command.build_py import build_py
from setuptools.command.sdist import sdist


# The goal is to get the version without doing a regular/full import of
# stgit. Executing the stgit._version module will obtain the version
# without importing anything else from the stgit package.
def _get_version():
    spec = spec_from_file_location('version', os.path.join('stgit', '_version.py'))
    module = module_from_spec(spec)
    spec.loader.exec_module(module)
    return module.__version__


version = _get_version()


def _write_version(base_dir):
    _version_path = os.path.join(base_dir, 'stgit', '_version.py')
    try:
        # This could be a hard link, so try to delete it first.
        os.remove(_version_path)
    except OSError:
        os.makedirs(os.path.join(base_dir, 'stgit'), exist_ok=True)
    with open(_version_path, "w") as f:
        f.write(
            "# Generated by setup.py.\n"
            "__version__ = '{}'\n".format(version)
        )


class _stgit_build_py(build_py):
    def run(self):
        super().run()
        _write_version(self.build_lib)


class _stgit_sdist(sdist):
    def make_release_tree(self, base_dir, files):
        super().make_release_tree(base_dir, files)
        _write_version(base_dir)


# Override setuptools build_py and sdist commands to rewrite the
# _version.py file into those commands' destination trees.
# N.B. the _version.py in the worktree is never overwritten.
cmdclass = dict(sdist=_stgit_sdist, build_py=_stgit_build_py)


def _generate_code():
    import stgit.commands
    from stgit.completion.bash import write_bash_completion
    from stgit.completion.fish import write_fish_completion

    base = os.path.abspath(os.path.dirname(__file__))

    commands = stgit.commands.get_commands(allow_cached=False)
    with open(os.path.join(base, 'stgit', 'commands', 'cmdlist.py'), 'w') as f:
        stgit.commands.py_commands(commands, f)

    completion_dir = os.path.join(base, 'completion')
    os.makedirs(completion_dir, exist_ok=True)
    with open(os.path.join(completion_dir, 'stgit.bash'), 'w') as f:
        write_bash_completion(f)
    with open(os.path.join(completion_dir, 'stg.fish'), 'w') as f:
        write_fish_completion(f)


# Attempt to generate completion scripts and cmdlist.py. When setup.py
# is executed in the context of a pip installation, the stgit package
# will not be available and thus this will fail with an Import error.
# However, in that case the generated files will already be a part of
# either the sdist or wheel package that pip is installing.
try:
    _generate_code()
except ImportError:
    print("Skipping stgit code generation")


setup(
    name='stgit',
    version=version,
    license='GPLv2',
    author='Catalin Marinas',
    author_email='catalin.marinas@gmail.com',
    maintainer='Peter Grayson',
    maintainer_email='pete@jpgrayson.net',
    url='http://stacked-git.github.io',
    download_url='https://github.com/stacked-git/stgit.git',
    description='Stacked Git',
    long_description='Application for managing Git commits as a stack of patches.',
    python_requires='>=3.5',
    zip_safe=False,
    scripts=['stg'],
    cmdclass=cmdclass,
    packages=[
        'stgit',
        'stgit.commands',
        'stgit.completion',
        'stgit.lib',
        'stgit.lib.git',
    ],
    data_files=[
        ('share/stgit/templates', glob('stgit/templates/*.tmpl')),
        ('share/stgit/examples', glob('examples/*.tmpl') + ['examples/gitconfig']),
        ('share/stgit/contrib', ['contrib/stgbashprompt.sh']),
        (
            'share/stgit/completion',
            [
                'completion/stg.fish',
                'completion/stgit.bash',
                'completion/stgit.zsh',
            ],
        ),
    ],
    package_data={
        'stgit': [
            'templates/covermail.tmpl',
            'templates/mailattch.tmpl',
            'templates/patchandattch.tmpl',
            'templates/patchexport.tmpl',
            'templates/patchmail.tmpl',
        ],
    },
    classifiers=[
        'Development Status :: 5 - Production/Stable',
        'Environment :: Console',
        'Intended Audience :: Developers',
        'License :: OSI Approved :: GNU General Public License v2 (GPLv2)',
        'Natural Language :: English',
        'Operating System :: OS Independent',
        'Programming Language :: Python',
        'Programming Language :: Python :: 3',
        'Programming Language :: Python :: 3.5',
        'Programming Language :: Python :: 3.6',
        'Programming Language :: Python :: 3.7',
        'Programming Language :: Python :: 3.8',
        'Programming Language :: Python :: 3.9',
        'Programming Language :: Python :: Implementation :: CPython',
        'Programming Language :: Python :: Implementation :: PyPy',
        'Topic :: Software Development :: Version Control',
    ],
)
