name: CI

on:
  push:
    branches: [ '*' ]
    tags: [ '*' ]
  pull_request:
  schedule:
  # Every Sunday at 1:30
  - cron: '30 1 * * 0'

jobs:
  build-and-test:
    name: Build and Test
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            profile: release
            toolchain: stable
          - os: ubuntu-latest
            profile: dev
            toolchain: stable
          - os: ubuntu-latest
            profile: dev
            toolchain: nightly
          - os: macos-latest
            profile: dev
            toolchain: stable
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.toolchain }}
        profile: minimal
    - name: Build
      run: |
        cargo build --all-features --profile ${{ matrix.profile }}
    - name: Install Test Dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install quilt gnupg2
    - name: Install Test Dependencies (MacOS)
      if: matrix.os == 'macos-latest'
      run: |
        # coreutils provides the `timeout` command used to wrap `make` below.
        # gnu-sed is needed by some tests (e.g. t3400-pick.sh).
        brew install coreutils gnu-sed
        echo "$(brew --prefix)/opt/gnu-sed/libexec/gnubin" >> $GITHUB_PATH
        echo "$(brew --prefix)/opt/coreutils/libexec/gnubin" >> $GITHUB_PATH
    - name: Test
      env:
        STG_PROVE_OPTS: "--jobs=2"
        STG_TEST_OPTS: "--verbose-log"
        STG_TEST_PROFILE: ${{ matrix.profile }}
      run: |
        timeout 900s make -C t prove

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
    - name: Run Unit Tests
      run: |
        cargo test

  clippy:
    name: Clippy Lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        components: clippy
    - name: Clippy Checks
      run: |
        cargo clippy -- --deny warnings

  rustfmt:
    name: Format Lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        components: rustfmt
    - name: Check formatting
      run: |
        cargo fmt --all --check

  api-docs:
    name: API Documentation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
    - name: Build docs
      run: |
        cargo rustdoc -- --deny warnings

  docs:
    name: User Documentation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install asciidoc asciidoctor docbook-xsl-ns xmlto
    - name: Build Docs Asciidoc
      run: |
        make -j2 -C Documentation
    - name: Build Docs Asciidoctor
      run: |
        make -j2 -C Documentation USE_ASCIIDOCTOR=1
    - name: Install HTML Docs
      run: |
        make -j2 -C Documentation USE_ASCIIDOCTOR=1 htmldir="$GITHUB_WORKSPACE"/stgit-html install-html
    - name: Upload HTML Docs
      uses: actions/upload-artifact@v2
      with:
        name: html-doc
        path: ${{ github.workspace }}/stgit-html

  windows-build:
    name: Windows Build
    runs-on: windows-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
    - name: Build
      run: |
        cargo build --all-features --profile release
    # - name: Setup MSYS2
    #   uses: msys2/setup-msys2@v2
    #   with:
    #     install: base-devel git
    # - name: Test
    #   shell: msys2 {0}
    #   env:
    #     STG_TEST_OPTS: "-v -i"
    #     STG_TEST_PROFILE: "release"
    #   run: |
    #     timeout 900s make -C t test
